
= STC Test Suite

== Overview

Each test has to compile and run or else it fails

We compile each Swift script to the corresponding Tcl script, then run
Turbine on it.

Use +run-tests.zsh+ to run the tests.  This automates the following
simplified command lines:
----
stc 100-test.swift 100-test.tcl
turbine -n 3 100-test.tcl
----

This creates stc logs, intermediate code, and output files.

== Invocation

Available arguments:

+-c+:: Continue after failure
+-k <SKIP>+:: Skip the first SKIP tests
+-n <COUNT>+:: Run only COUNT tests
+-O <VALUE>+:: Use stc -O VALUE
+-p <PATTERN>+:: Run only tests with name containing string PATTERN
+-f <OPTION>+:: Use stc -f OPTION
+-F <OPTION>+:: Use stc -F OPTION
+-v+ Verbose: turn on set -x to debug run-tests.zsh itself

== Supporting files 

* Setup script: TEST.setup.sh: Is run before STC and Turbine.  Can
  create input files, etc.  Must return exit code 0 or test fails.
* Check script: TEST.check.sh: Is run after STC and Turbine.  Can
  check outputs, remove files, etc.  Must return exit code 0 or test
  fails.  E.g., can examine TEST.out for correctness Expected output:
* TEST.exp: Each line of this file must be in TEST.out or test fails.
* TEST.args: Arguments for run time

== Tokens

Included in comments in TEST.swift to modify test behavior

NOTE: Tests that do not run should be linked to issues in exm-issues

* SKIP-THIS-TEST: Skips test THIS-TEST-SHOULD-NOT-COMPILE: If
  TEST.swift compiles, test fails.  Used to test for Swift code that
  STC should reject.  
* THIS-TEST-SHOULD-NOT-RUN: If TEST.tcl runs in Turbine, test fails. 
  Used to test for Swift logic that should crash Turbine

== Numbering

The tests are numbered for lexical sorting by shell glob.

000::       Script fragments, noops, assert()s
100::       Basic function calls, errors
200::       Conditionals, recursion, expressions
300::       Arrays, structs
400::       For loops
        480: Key functions on arrays
500::       Types
        560: files
        580: foreach
        590: blobs
600::       User builtins, interesting CPP uses
700::       STC standard library
        700: strings
        710: argc/argv
        730: stdio
        780: MPE
        790: External scripting languages (R, Python)
800::       Error outputs
900::       Apps??? Formerly advanced constructs
        900: More for loops- move to 400?
        910: iterate - move to 400?
        920: wait() {}
        940: Globals
        950: Stats
        960: Updateables
        970: PIPS snippets
        980: RDCEP snippets

== Adding a test

Simply create tests/TEST.swift and run-tests.zsh should find it.
Optionally add setup script, check script, expected output.

== Clean

Use ./clean.sh to clean up files created by the test suite
