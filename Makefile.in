
TURBINE = lib/libturbine.a

PACKAGE = lib/pkgIndex.tcl

all: package

turbine: $(TURBINE)

package: $(PACKAGE)

TCL_TURBINE_SO := lib/libtclturbine.so

tcl_turbine: $(TCL_TURBINE_SO)

srcdir = @srcdir@

ifeq ($(V),1)
	QUIET_COMPILE = 0
else
	QUIET_COMPILE = 1
endif

ifeq ($(QUIET_COMPILE),1)
  # Prints a short description of the action, does not show command
  Q=@echo
  E=@
else
  # Echoes the entire command
  Q=@echo >/dev/null
  E=
endif

# WOZTOOLS = @USE_WOZTOOLS@
# WOZTOOLS_LIB = $(WOZTOOLS)/lib/libwoztools.a

CC = @CC@
CFLAGS := @CFLAGS@

# Set includes
CFLAGS += -I $(srcdir)
# CFLAGS += -I $(WOZTOOLS)/src

TCL = @USE_TCL@
TCLSH = $(TCL)/$(shell find $(TCL)/bin -name tcl8.* )

MPI = @USE_MPI@
ifneq ($(MPI),0)
	CFLAGS += -I $(MPI)/include
endif
ADLB = @USE_ADLB@
ifneq ($(ADLB),0)
	CFLAGS += -I $(ADLB)
endif

CFLAGS += -std=gnu99
CFLAGS += -g
CFLAGS += -Wall
CFLAGS += @TCL_INCLUDE_SPEC@
CFLAGS += -fPIC

# LDFLAGS += -L $(WOZTOOLS)/lib

# LIBS += -l woztools

dirname = $(patsubst %/,%,$(dir $(1)))

DIR :=

TURBINE_SRC :=
TCL_TURBINE_SRC :=
include src/turbine/module.mk
include src/util/module.mk
include src/tcl/module.mk
include src/tcl/adlb/module.mk
include src/tcl/turbine/module.mk
include lib/module.mk
TURBINE_DEPS := $(patsubst %.c, %.d, $(TURBINE_SRC) $(TCL_TURBINE_SRC))

TCL_TURBINE_OBJS += $(patsubst %.c, %.o, $(TCL_TURBINE_SRC))

TEST_SRC :=
include test/module.mk
TEST_DEPS := $(patsubst %.c, %.d, $(TEST_SRC))

# Dependency files:
# Remember that having a bad #include can cause dependency
# file generation to fail silently
# Solution: use target check_includes
DEPS := $(TURBINE_DEPS) $(TEST_DEPS)

deps: $(DEPS)

%.d: %.c
	$(Q) "  DEP		$(@)"
	$(E) CC="$(CC)" $(srcdir)/depend.sh \
             $(call dirname, $(*)) $(<) $(@) $(CFLAGS)

ifeq (,$(filter clean deps,$(MAKECMDGOALS)))
 -include $(DEPS)
endif

tags: TAGS

TAGS: deps.txt
	$(Q) "  TAGS "
	$(E) etags `cat deps.txt`

# Extract all files from *.d files, format and sort:
# Formats to one file per line & extracts junk and extra files in *.d
deps.txt: $(DEPS)
	$(Q) "  DEPS.TXT "
	$(E) $(srcdir)/collect.sh $(@) $(DEPS)

# Check existing *.d files for files that do not exist
# Useful when dependency file generation is failing
# Must "make clean" to re-check correctly
EXISTING_D = $(shell find . -name *.d)

check_includes: deps_contents.txt
	$(Q) "  CHECK.SH"
	$(E) $(srcdir)/check.sh deps_contents.txt

deps_contents.txt:
	$(Q) "  SH		$(@)"
	$(E) $(srcdir)/collect.sh $(@) $(EXISTING_D)

%.o: %.c
	$(Q) "  CC		$(@)"
	$(E) $(CC) $(CFLAGS) -c $(<) -o $(@)

TURBINE_OBJS = $(patsubst %.c, %.o, $(TURBINE_SRC))

$(TURBINE): $(TURBINE_OBJS)
	$(Q) "  AR		$(@)"
	$(E) install -d lib
	$(E) ar rcs $(@) $(TURBINE_OBJS)

$(TCL_TURBINE_SO): $(TCL_TURBINE_OBJS) $(TURBINE_OBJS) # $(WOZTOOLS_LIB)
	$(Q) "  LINK		$(@)"
	$(E) gcc -shared -fPIC -o $(@) $(TCL_LINK_FLAGS) \
             $(TCL_TURBINE_OBJS) $(TURBINE_OBJS)
#             -L $(WOZTOOLS)/lib -l woztools

# Test cases in C as objects
TEST_OBJS = $(patsubst %.c, %.o, $(TEST_SRC_C))
# Test cases in C as dependency files
TEST_DEPS = $(patsubst %.c, %.d, $(TEST_SRC_C))
# Test cases in C compiled to binary
TEST_BINS = $(patsubst %.c, %.x, $(TEST_SRC_C))
# Test case results
TEST_SCRIPTS = $(patsubst %.c, %.sh, $(TEST_SRC_C))
# Test case outputs
TEST_OUTPUT  := $(patsubst %.c,   %.out, $(TEST_SRC_C))
TEST_OUTPUT  += $(patsubst %.tcl, %.out, $(TEST_SRC_TCL))
# Test case results
TEST_RESULTS := $(patsubst %.c,   %.result, $(TEST_SRC_C))
TEST_RESULTS += $(patsubst %.tcl, %.result, $(TEST_SRC_TCL))

# Target to just build all C tests
tests: $(TEST_BINS)

# Run all tests
test_results: $(TEST_RESULTS)

$(TEST_BINS): %.x: %.o $(TURBINE) # $(WOZTOOLS_LIB)
	$(Q) "  LINK		$(@)"
	$(E) $(CC) $(LDFLAGS) $(<) $(TURBINE) $(LIBS) -o $(@)

# Test result rule for C tests
%.result: %.sh %.x
#       Cannot use chmod in config.status
	$(E) chmod u+x test/runbin.zsh
	$(Q) "  SH		$(@)"
	$(E) mkdir -p test/data
	$(E) rm -f $(@)
	$(E) $(<) > $(*).tmp 2>&1
	$(E) mv $(*).tmp $(@) 2>&1

# Test result rule for TCL tests
%.result: %.sh %.tcl $(PACKAGE)
	$(Q) "  SH		$(@)"
	$(E) mkdir -p test/data
	$(E) rm -f $(@)
	$(E) $(<) > $(*).tmp 2>&1
	$(E) mv $(*).tmp $(@)

clean::
	@rm -fv  $(TURBINE) $(TCL_TURBINE_SO) $(TCL_ADLB_SO)
	@rm -fv  $(DEPS) $(TEST_DEPS) deps.txt deps_contents.txt TAGS
	@rm -fv  $(TEST_BINS) $(TEST_OBJS) $(TEST_OUTPUT)
	@rm -fv  $(TEST_RESULTS)
	@rm -fv  $(TURBINE_OBJS)
	@rm -fv  $(TCL_TURBINE_OBJS)
	@rm -fvr test/data

# Clean *.result files that did not succeed
clean-failed:
	@rm -fv `grep -L "exit 0" **/*.result`

.PHONY: clean

# Useful target when debugging the build system
debug_build:
	@echo DEPS: $(DEPS)
	@echo TURBINE_SRC: $(TURBINE_SRC)
	@echo TURBINE_OBJS: $(TURBINE_OBJS)
	@echo TESTS: $(TESTS)
