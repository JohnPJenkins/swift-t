Enabling running ordinary C code as Swift/T application on IBM BG-style supercomputers
=======================================================================================

Motivation:
Since the target computing environment does not allow fork/exec on compute
nodes, an alternative approach is to tightly couple existing codes into the
Swift/T framework and run it as a single piece of code.

The benefit to users is ease of application composability while still being
able to take advantage of high-level expressivity and high performance from
execution.

The package contains code that demonstrates the following:

1. Running an ordinary C program with the command-line arguments passed to the program via argc/argv.
2. Running a similar TCL program.
3. Running the C program mentioned in bullet 1 by integrating its main function into an extension and providing it as a shared object.

The package contains the following files:

About.txt : The current file.
prog-c.c  : main program a la application code; passes the args of main to swift-main
swift-main.c : The swift-main code that takes up the application code 
extension.c : Injects an ability to call c function with TCL 
helpers.h : 
make-package.tcl : Creates and defines TCL package, version, function definitions.
prog-swift.swift : High level Swift script defining 
prog-tcl.tcl : A separate TCL program that calls the swift-main tcl function with commandline args.
swift-main.h : Header file to declare functions defined in Swift main.
swift-main.i : Swig interface definition. Generates C bindings for TCL. In other words, makes it possible to call TCL library and user functions from C.
swift-main.tcl : Auto-generated from ?
Makefile : Make file to generate shared libraries from source code, `make run` compiles and runs the code.
run.sh : run script.

