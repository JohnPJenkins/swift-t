
package exm.stc.common.lang;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import exm.stc.common.lang.Types.Type;

/**
 * This class is used to contain the relevant information about
 * each variable in a Swift program.  All member variables
 * in the Variable are final, which means that each variable
 * instance can be treated as an immutable value and
 * safely shared between multiple data structures
 *
 */
public class Var {
  private final Type type;
  private final String name;
  private final VarStorage storage;
  private final DefType defType;
  private final Var mapping;

  public static final String TMP_VAR_PREFIX = "__t";
  public static final String ALIAS_VAR_PREFIX = "__alias";
  public static final String STRUCT_FIELD_VAR_PREFIX = "__sf_";
  public static final String LOCAL_VALUE_VAR_PREFIX = "__v_";
  public static final String FILENAME_OF_PREFIX = "__filename_";
  /* Separate value prefix to avoid name clashes for optimizer 
   *    inserted variables */
  public static final String OPT_VALUE_VAR_PREFIX = "__ov_";
  public static final String LOOP_INDEX_VAR_PREFIX = "__i";
  public static final String GLOBAL_CONST_VAR_PREFIX = "__c";
  public static final String DEREF_COMPILER_VAR_PREFIX = "__dr_";
  public static final String LOOP_COND_PREFIX = "__xcond";
  public static final String OUTER_VAR_PREFIX = "__outer";

  public enum VarStorage {
    /** Reference stored in global stack frame */
    STACK,
    /** Reference stored only temporarily in control flow */
    TEMP,
    /** Reference to variable allocated elsewhere */
    ALIAS,
    /** Value only stored in interpreter */
    LOCAL,
    /** Global constant */
    GLOBAL_CONST,
  }

  /**
   * How the variable was defined (e.g. local vs argument)
   */
  public enum DefType
  {
    /** Local variable */
    LOCAL_USER,
    /** Compiler-generated local */
    LOCAL_COMPILER,
    /** Input argument */
    INARG,
    /** Output argument */
    OUTARG,
    /** Global constant generated by compiler */
    GLOBAL_CONST,
  }

  public Var(Type type)
  {
    this.type = type;
    this.name = "...";
    this.storage = VarStorage.ALIAS;
    this.defType = DefType.INARG;
    this.mapping = null;
  }

  public Var(Type type, String name,
                  VarStorage storage, DefType defType)
  {
    this.type = type;
    this.name = name;
    this.storage = storage;
    this.defType = defType;
    this.mapping = null;
  }
  
  public Var(Type type, String name,
      VarStorage storage, DefType defType, Var mapping) {
    this.type = type;
    this.name = name;
    this.storage = storage;
    this.defType = defType;
    assert(mapping == null || Types.isString(mapping.type()));
    this.mapping = mapping;
  }

  public String name() {
    return name;
  }

  public Type type() {
    return type;
  }

  public VarStorage storage() {
    return storage;
  }

  public DefType defType() {
    return defType;
  }

  public Var mapping() {
    return mapping;
  }

  public boolean isMapped() {
    return mapping != null;
  }



  public static String names(List<Var> list)
  {
    StringBuilder sb = new StringBuilder(list.size()*16);
    Iterator<Var> it = list.iterator();
    while (it.hasNext())
    {
      Var v = it.next();
      sb.append(v.name());
      if (it.hasNext())
        sb.append(' ');
    }
    return sb.toString();
  }

  public static List<String> nameList(Collection<Var> variables)
  {
    List<String> result = new ArrayList<String>(variables.size());
    nameFill(result, variables);
    return result;
  }
  
  public static Set<String> nameSet(Collection<Var> variables)
  {
    Set<String> result = new HashSet<String>(variables.size());
    nameFill(result, variables);
    return result;
  }
  
  private static void nameFill(Collection<String> names,
                                  Collection<Var> variables)
  {
    for (Var v : variables)
      names.add(v.name());
  }

  public static List<Type> extractTypes(List<Var> variables)
  {
    ArrayList<Type> result = new ArrayList<Type>(variables.size());
    for (Var v: variables) {
      result.add(v.type());
    }

    return result;
  }
  
  /**
   * Different by variable name
   * @param list
   * @param subtract
   * @return
   */
  public static List<Var> varListDiff(List<Var> list, List<Var> subtract) {
    Set<String> subSet = nameSet(subtract);
    ArrayList<Var> diff = new ArrayList<Var>();
    for (Var v: list) {
      if (!subSet.contains(v.name())) {
        diff.add(v);
      }
    }
    return diff;
  }
  
  /**
   * Create dereferenced variable given a reference
   */
  public static Var createDerefTmp(Var ref, VarStorage storage) {
    assert(Types.isRef(ref.type()));
    Var res = new Var(ref.type().memberType(),
        DEREF_COMPILER_VAR_PREFIX + ref.name(),
        storage, DefType.LOCAL_COMPILER, 
        null);
    assert(Types.isRefTo(ref.type(), res.type()));
    return res;
  }

  @Override
  public String toString()
  {
    return type.toString()+':'+name;
  }

  /**
   * Find the first variable with a matching name in the provided collection
   * @param variables
   * @param name
   * @return
   */
  public static Var findByName(Collection<Var> variables,
      String name) {
    for (Var v: variables) {
      if (v.name().equals(name)) {
        return v;
      }
    }
    return null;
  }
}
