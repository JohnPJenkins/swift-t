
TURBINE = lib/libturbine.a
TURBINE_VERSION = 0.0.3

PACKAGE = lib/pkgIndex.tcl

all: package

turbine: $(TURBINE)

package: $(PACKAGE)

TCL_TURBINE_SO := lib/libtclturbine.so

tcl_turbine: $(TCL_TURBINE_SO)

INSTALL_PREFIX  = @prefix@
INSTALL_BIN     = $(INSTALL_PREFIX)/bin
INSTALL_LIB     = $(INSTALL_PREFIX)/lib
INSTALL_SCRIPTS = $(INSTALL_PREFIX)/scripts
INSTALL_EXPORT  = $(INSTALL_PREFIX)/export
SCRIPTS_SUBMIT  = $(shell find scripts/submit -name "*sh" )

srcdir = @srcdir@

ifeq ($(V),1)
	QUIET_COMPILE = 0
else
	QUIET_COMPILE = 1
endif

ifeq ($(QUIET_COMPILE),1)
  # Prints a short description of the action, does not show command
  Q=@echo
  E=@
else
  # Echoes the entire command
  Q=@echo >/dev/null
  E=
endif

CC = @CC@
CFLAGS := @CFLAGS@

# Set includes
CFLAGS += -I .
# CFLAGS += additional system includes here

# Set library locations
LDFLAGS = @LDFLAGS@
# LDFLAGS += additional system libs here

C_UTILS = @USE_C_UTILS@

TCL := @USE_TCL@
TCLSH := @USE_TCLSH@

MACHINE = @USE_MACHINE@

# On some systems, the user will use mpicc,
# on others, the user will specify the MPI include and lib paths
MPI = @USE_MPI@
MPI_INCLUDE = @USE_MPI_INCLUDE@
MPI_LIB_DIR = @USE_MPI_LIB_DIR@
MPI_LIB_NAME = @USE_MPI_LIB_NAME@
# The actual linker arguments:
MPI_LIB :=
ifneq ($(MPI),0)
	CFLAGS += -I $(MPI)/include
endif
ifneq ($(MPI_INCLUDE),0)
	CFLAGS += -I $(MPI_INCLUDE)
endif
ifeq ($(MACHINE),normal)
	MPI_LIB_DIR = $(MPI)/lib
	MPI_LIB_NAME = libmpich.so
	MPI_LIB	= -L $(MPI_LIB_DIR) -l mpich
endif
ifeq ($(MACHINE),sicortex)
	MPI_LIB = -L $(MPI)/lib -l scmpi
endif
ifeq ($(MACHINE),bgp-zeptoos)
	MPI_LIB =
endif
ifeq ($(MACHINE),custom)
	ifneq ($(MPI_LIB_DIR),0)
		MPI_LIB += -L $(MPI_LIB_DIR)
	endif
	ifneq ($(MPI_LIB_NAME),0)
		MPI_LIB += -l $(MPI_LIB_NAME)
	endif
endif

LAUNCH = @USE_LAUNCHER@

ADLB = @USE_ADLB@
ifneq ($(ADLB),0)
	CFLAGS += -I $(ADLB)/src
endif

USE_MPE = @USE_MPE@

CFLAGS += -std=gnu99
CFLAGS += -g
CFLAGS += -Wall
CFLAGS += -I $(C_UTILS)/include
CFLAGS += @TCL_INCLUDE_SPEC@
CFLAGS += -fPIC
# This is referenced in lookup3.c - may want to drop this for speed
CFLAGS += -D VALGRIND
CFLAGS += -D TURBINE_VERSION=\"$(TURBINE_VERSION)\"

LIBS += -L $(C_UTILS)/lib -l exmcutils
LIBS += -L $(ADLB)/lib -l adlb
ifeq ($(USE_MPE),1)
	LIBS += -l mpe
endif
LIBS += $(MPI_LIB)

dirname = $(patsubst %/,%,$(dir $(1)))

DIR :=

TURBINE_SRC :=
TCL_TURBINE_SRC :=
include src/turbine/module.mk
include src/util/module.mk
include src/tcl/module.mk
include src/tcl/adlb/module.mk
include src/tcl/turbine/module.mk
include src/tcl/mpe/module.mk

include lib/module.mk

TURBINE_DEPS := $(patsubst %.c, %.d, $(TURBINE_SRC) $(TCL_TURBINE_SRC))

TCL_TURBINE_OBJS += $(patsubst %.c, %.o, $(TCL_TURBINE_SRC))

TEST_SRC :=
include tests/module.mk
TEST_DEPS := $(patsubst %.c, %.d, $(TEST_SRC))

# Dependency files:
# Remember that having a bad #include can cause dependency
# file generation to fail silently
# Solution: use target check_includes
DEPS := $(TURBINE_DEPS) $(TEST_DEPS)

deps: $(DEPS)

%.d: %.c
	$(Q) "  DEP		$(@)"
	$(E) CC="$(CC)" $(srcdir)/maint/depend.sh \
             $(call dirname, $(*)) $(<) $(@) $(CFLAGS)

ifeq (,$(filter clean deps,$(MAKECMDGOALS)))
 -include $(DEPS)
endif

tags: TAGS

TAGS: deps.txt
	$(Q) "  TAGS "
	$(E) etags `cat deps.txt`

# Extract all files from *.d files, format and sort:
# Formats to one file per line & extracts junk and extra files in *.d
deps.txt: $(DEPS)
	$(Q) "  DEPS.TXT "
	$(E) $(srcdir)/collect.sh $(@) $(DEPS)

# Check existing *.d files for files that do not exist
# Useful when dependency file generation is failing
# Must "make clean" to re-check correctly
EXISTING_D = $(shell find . -name *.d)

check_includes: deps_contents.txt
	$(Q) "  CHECK.SH"
	$(E) $(srcdir)/maint/check.sh deps_contents.txt

deps_contents.txt:
	$(Q) "  SH		$(@)"
	$(E) $(srcdir)/maint/collect.sh $(@) $(EXISTING_D)

%.o: %.c
# 	The following string produces a false autoscan message (C++)
	$(Q) "  CC		$(@)"
	$(E) $(CC) $(CFLAGS) \
             -c $(<) -o $(@)

TURBINE_OBJS = $(patsubst %.c, %.o, $(TURBINE_SRC))

$(TURBINE): $(TURBINE_OBJS)
	$(Q) "  AR		$(@)"
	$(E) install -d lib
	$(E) ar rcs $(@) $(TURBINE_OBJS)

$(TCL_TURBINE_SO): $(TCL_TURBINE_OBJS) $(TURBINE_OBJS)
	$(Q) "  LINK		$(@)"
	$(E) $(CC) -shared -o $(@) \
             $(TCL_LINK_FLAGS) \
             $(TCL_TURBINE_OBJS) \
             $(TURBINE_OBJS) \
             $(LDFLAGS) \
             $(LIBS) \
             $(MPI_LIB) \
             -Wl,-rpath -Wl,$(INSTALL_LIB) \
             -Wl,-rpath -Wl,$(MPI_LIB_DIR)

# Test cases in C as objects
TEST_OBJS = $(patsubst %.c, %.o, $(TEST_SRC_C))
# Test cases in C as dependency files
TEST_DEPS = $(patsubst %.c, %.d, $(TEST_SRC_C))
# Test cases in C compiled to binary
TEST_BINS = $(patsubst %.c, %.x, $(TEST_SRC_C))
# Test case results
TEST_SCRIPTS = $(patsubst %.c, %.sh, $(TEST_SRC_C))
# Test case outputs
TEST_OUTPUT  := $(patsubst %.c,   %.out, $(TEST_SRC_C))
TEST_OUTPUT  += $(patsubst %.tcl, %.out, $(TEST_SRC_TCL))
# Test case results
TEST_RESULTS := $(patsubst %.c,   %.result, $(TEST_SRC_C))
TEST_RESULTS += $(patsubst %.tcl, %.result, $(TEST_SRC_TCL))

# Target to just build all C tests
tests: $(TEST_BINS)

# Run all tests
test_results: $(TEST_RESULTS)

# Binary executables in the test suite
$(TEST_BINS): %.x: %.o $(TURBINE) $(C_UTILS_LIB)
	$(Q) "  LINK		$(@)"
	$(E) $(CC) $(LDFLAGS) $(<) $(TURBINE) \
        $(LIBS) \
        -Wl,-rpath -Wl,$(INSTALL_LIB) \
        -Wl,-rpath -Wl,$(MPI_LIB_DIR) \
	-o $(@)

# Test result rule for C tests
%.result: %.sh %.x
#       Cannot use chmod in config.status
	$(E) chmod u+x tests/runbin.zsh
	$(Q) "  SH		$(@)"
	$(E) mkdir -p tests/data
	$(E) rm -f $(@)
	$(E) $(<) > $(*).tmp 2>&1
	$(E) mv $(*).tmp $(@) 2>&1

# Test result rule for Tcl tests
%.result: %.sh %.tcl $(PACKAGE) bin/turbine
	$(Q) "  SH		$(@)"
	$(E) mkdir -p tests/data
	$(E) rm -f $(@)
	$(E) LAUNCH=$(LAUNCH) $(<) > $(*).tmp 2>&1
	$(E) mv $(*).tmp $(@)

clean::
	@rm -fv  $(TURBINE) $(TCL_TURBINE_SO) $(TCL_ADLB_SO)
	@rm -fv  $(DEPS) $(TEST_DEPS) deps.txt deps_contents.txt TAGS
	@rm -fv  $(TEST_BINS) $(TEST_OBJS) $(TEST_OUTPUT)
	@rm -fv  $(TEST_RESULTS)
	@rm -fv  $(TURBINE_OBJS)
	@rm -fv  $(TCL_TURBINE_OBJS)
	@rm -fvr tests/data

# Clean *.result files that did not succeed
clean-failed:
	@rm -fv `grep -L "exit 0" **/*.result`

.PHONY: clean

# Useful target when debugging the build system
debug_build:
	@echo DEPS: $(DEPS)
	@echo TURBINE_SRC: $(TURBINE_SRC)
	@echo TURBINE_OBJS: $(TURBINE_OBJS)
	@echo TESTS: $(TESTS)

install: package
	@echo
	$(Q) "  INSTALL: $(INSTALL_PREFIX)"
#       Set up directories
	$(E) mkdir -pv $(INSTALL_PREFIX)
	$(E) mkdir -pv $(INSTALL_LIB)
	$(E) mkdir -pv $(INSTALL_BIN)
	$(E) mkdir -pv $(INSTALL_SCRIPTS)
	$(E) mkdir -pv $(INSTALL_EXPORT)
#       Copy shared objects so that libs are in rpath
	$(E) cp -uv $(TCL)/lib/libtcl8.5.so        $(INSTALL_LIB)
	$(E) cp -uv $(C_UTILS)/lib/libexmcutils.so $(INSTALL_LIB)
	$(E) cp -uv $(ADLB)/lib/libadlb.so         $(INSTALL_LIB)
#            We assume libmpe.so is in the ADLB directory
ifeq ($(USE_MPE),1)
	$(E) cp -uv $(ADLB)/libmpe.so              $(INSTALL_LIB)
endif
#       Copy Turbine items
	$(E) cp -uv bin/turbine $(INSTALL_BIN)
	$(E) cp -uv lib/*.tcl lib/*.so $(INSTALL_LIB)
	$(E) cp -uv scripts/*.zsh scripts/*.sh $(INSTALL_SCRIPTS)
	$(E) cp -uv --parents $(SCRIPTS_SUBMIT) $(INSTALL_PREFIX)
	$(E) cp -uv --parents export/*.swift $(INSTALL_PREFIX)
	$(E) cp -uv --parents export/**/*.swift $(INSTALL_PREFIX)
