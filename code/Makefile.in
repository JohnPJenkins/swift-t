
# ADLB Makefile

# Usage notes:
# make V=1 turns on verbose output

USE_MAC = @USE_MAC@

# Products:
ADLB_A  = libadlb.a
ifeq ($(USE_MAC),no)
ADLB_SO = libadlb.so
else
ADLB_SO = libadlb.dylib
endif

all: lib/$(ADLB_SO)

# Verbosity control:
ifeq ($(V),1)
  QUIET_COMPILE = 0
else
  QUIET_COMPILE = 1
endif

ifeq ($(QUIET_COMPILE),1)
  # Prints a short description of the action, does not show command
  Q = @echo
  E = @
else
  # Just echo the entire command
  Q = @ :
  E =
endif

INSTALL_PREFIX  = @prefix@
INSTALL_LIB     = $(INSTALL_PREFIX)/lib
INSTALL_INCLUDE = $(INSTALL_PREFIX)/include

CC  = @CC@
FC  = @F77@

AR      = @AR@
ARFLAGS = cr
RANLIB  = @RANLIB@

C_UTILS = @USE_C_UTILS@

INCLUDES = -I . -I $(C_UTILS)/include

USE_XLC = @USE_XLC@
ifeq ($(USE_XLC),1)
#       Using IBM XLC
        PIC = -qpic
        STD =
        SHARED = -qnostaticlink -qmkshrobj
else
ifeq ($(USE_MAC),yes)
#       Mac
	MAC_FLAT = -flat_namespace
	MAC_NAME = -install_name $(INSTALL_LIB)/$(ADLB_SO)
	SHARED = -dynamiclib $(MAC_FLAT)
else
#       Linux
	MAC_FLAT =
        SHARED = -shared
endif
#       Linux and Mac
        PIC = -fPIC
        STD = -std=gnu99
endif

# No logging
LDFLAGS  = @LDFLAGS@
CFLAGS  = @CFLAGS@ $(PIC) $(STD) $(INCLUDES) -g
# Both MPI and user-defined MPE logging
CFLAGS_MPILOG  = $(CFLAGS) -DLOG_GUESS_USER_STATE @MPILOG_FLAG@
# user-defined MPE logging
CFLAGS_LOG  = $(CFLAGS) -DNO_MPI_LOGGING -DLOG_GUESS_USER_STATE @LOG_FLAG@

LIBDIRS = -L$(INSTALL_LIB) -L$(C_UTILS)/lib
LIBS = -l exmcutils

RPATHS = -Wl,-rpath -Wl,$(C_UTILS)/lib

ADLB_RPATH = -Wl,-rpath -Wl,$(INSTALL_LIB)

OBJS     = src/xq.o src/data.o
# Objects with No Logging
NLOBJS   = src/adlb_prof.o  src/adlb.o
# Objects with MPE Logging
MLOBJS   = src/adlb_prof.mo src/adlb.mo

ENABLE_MPE = @ENABLE_MPE@

ifeq ($(BUILD_LOGGING),1)
	CFLAGS += -D ENABLE_MPE
	LIBS += -l mpe -llmpe
endif

.SUFFIXES: .c .o .eo .mo

%.o: %.c
	$(Q) "  CC		$(@)"
	$(E) $(CC) $(CFLAGS) -c -o $(@) $(<)

# .mo are object file that does both MPI and user-defined MPE logging
.c.mo:
	$(CC) $(CFLAGS_MPILOG) -c -o $*.mo $<

apps/%.x: install apps/%.o
	$(CC) $(CFLAGS) $(MAC_FLAT) -o $(@) $(<) $(LIBDIRS) $(LDFLAGS) $(ADLB_RPATH) $(RPATHS) $(LIBS) -l adlb -lm

lib/$(ADLB_A): $(OBJS)
	$(Q) "  AR		$(@)"
	$(E) mkdir -p lib
	$(E) $(AR) $(ARFLAGS) $@ $(OBJS)
	$(E) $(RANLIB) $@

lib/$(ADLB_SO): $(OBJS) $(NLOBJS)
	$(Q) "  LINK		$(@)"
	$(E) mkdir -p lib
	$(E) $(CC) $(SHARED) -o $(@) $(PIC) $(NLOBJS) $(OBJS) \
        $(MAC_NAME) \
	-L$(C_UTILS)/lib \
        -Wl,-rpath -Wl,$(C_UTILS)/lib -l exmcutils
# -L . -l mpe -Wl,-rpath -Wl,$(PWD)

# ADLB library, libeladlb.a, that does only user-defined MPE logging
libeladlb.a: $(ELOBJS)
	$(AR) $(ARFLAGS) $@ $(ELOBJS)
	$(RANLIB) $@

libeladlb.so: $(OBJS) $(ELOBJS)
	gcc -shared -o $(@) -fPIC $(ELOBJS) $(OBJS) \
	-L $(C_UTILS)/lib -Wl,-rpath -Wl,$(C_UTILS)/lib -l exmcutils

# ADLB library, libmladlb.a, that does both MPI and user-defined MPE logging
libmladlb.a: $(MLOBJS)
	$(AR) $(ARFLAGS) $@ $(MLOBJS)
	$(RANLIB) $@

lib/libmladlb.so: $(OBJS) $(MLOBJS)
	$(Q) "  LINK		$(@)"
	$(E) mkdir -p lib
	$(E) $(CC) $(SHARED) -o $(@) $(PIC) $(OBJS) $(MLOBJS) \
        $(MAC_NAME) \
	-L$(C_UTILS)/lib \
        -Wl,-rpath -Wl,$(C_UTILS)/lib -l exmcutils \
	$(LDFLAGS)

	# mpicc $(SHARED) -o $(@) -fPIC $(MLOBJS) $(OBJS) \
	# -L $(C_UTILS)/lib -Wl,-rpath -Wl,$(C_UTILS)/lib -l exmcutils \
        # -L . -l mpe -Wl,-rpath -Wl,$(PWD)

clean:
	@rm -fv $(OBJS) $(NLOBJS) $(ELOBJS) $(MLOBJS) $(ADLB)

install: lib/$(ADLB_SO)
	mkdir -pv $(INSTALL_INCLUDE)
	mkdir -pv $(INSTALL_LIB)
	cp -v src/adlb.h $(INSTALL_INCLUDE)
	cp -v src/adlb-defs.h $(INSTALL_INCLUDE)
	cp -v src/xq.h $(INSTALL_INCLUDE)
	cp -v lib/$(ADLB_SO) $(INSTALL_LIB)
ifeq ($(ENABLE_MPE),yes)
	cp -v libmpe.so $(INSTALL_LIB)
endif
