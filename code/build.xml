
<project name="parser"
         default="jar">

  <!-- ExM parser build file

       Note:
       Eclipse generates class files in build/
       This Ant script puts them in src/
       The ones in src/ are the ones used in the output jar file
  -->

  <!-- Locations of jars and ANTLR grammar file -->
  <property name="antlr.jar"
            value="lib/antlr-3.4-complete-no-antlrv2.jar"/>
  <property name="parser.jar"
            value="lib/parser.jar"/>
  <property name="log4j.jar"
            value="lib/log4j-1.2.16.jar"/>
  <property name="json.jar"
            value="lib/json.jar"/>
  <property name="grammar"
            value="src/exm/stc/antlr/ExM.g"/>
  <property name="classpath"
            value=".:${antlr.jar}:${log4j.jar}"/>

  <target name="jar"
          depends="compile">
    <jar destfile="${parser.jar}"
         basedir="src"
         includes="**/*.class"
         manifest="META-INF/MANIFEST.MF"/>
  </target>

  <!-- We compile the packages separately
       This is so we can get all warnings on our code but suppress
       warnings on ANTLR-generated code that is outside our control
  -->
  <target name="compile"
          depends="compile.antlr,compile.ui,compile.gen,compile.ast,compile.ic,compile.frontend">
  </target>

  <!-- Check if the ANTLR code is up-to-date -->
  <uptodate srcfile="${grammar}"
            targetfile="${parser.jar}"
            property="antlr.uptodate"/>

  <!-- ANTLR output directory -->
  <property name="antlr.pkg"
            value="exm/stc/antlr/gen" />
  <property name="antlr.out"
            value="src/${antlr.pkg}" />

  <!-- Compile the ANTLR-generated parser code -->
  <target name="compile.antlr"
          depends="antlr.generate">
   <javac srcdir="src"
          includes="${antlr.pkg}/*.java"
          listfiles="${lf}"
          debug="true"
          debuglevel="source,lines,vars"
          includeantruntime="false"
          classpath=".:${antlr.jar}">
     <compilerarg value="-Xlint"/>
     <compilerarg value="-Xlint:-cast"/>
   </javac>
  </target>

  <!-- Call ANTLR to generate the parser code -->
  <target name="antlr.generate"
          unless="antlr.uptodate">
    <java classname="org.antlr.Tool"
          fork="true"
          failonerror="true">
      <arg value="-fo"/>
      <arg value="${antlr.out}"/>
      <arg value="${grammar}"/>
      <classpath>
         <pathelement location="${antlr.jar}"/>
         <pathelement location="${json.jar}"/>
      </classpath>
    </java>

    <echo message="ANTLR OK: output in: ${antlr.out}"/>
  </target>

  <!-- Compile the AST sources -->
  <target name="compile.ast"
          depends="compile.common,compile.antlr">
    <javac srcdir="src"
           includes="exm/stc/ast/*.java,exm/ast/**/*.java"
           listfiles="${lf}"
           debug="true"
           debuglevel="source,lines,vars"
           includeantruntime="false"
           classpath="${classpath}:${json.jar}">
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-cast"/>
    </javac>
  </target>

  <!-- Compile the frontend sources -->
  <target name="compile.frontend"
          depends="compile.common,compile.antlr,compile.ast">
    <javac srcdir="src"
           includes="exm/stc/frontend/*.java,exm/frontend/**/*.java"
           listfiles="${lf}"
           debug="true"
           debuglevel="source,lines,vars"
           includeantruntime="false"
           classpath="${classpath}:${json.jar}">
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-cast"/>
    </javac>
  </target>

  
  <!-- Compile the IC sources -->
  <target name="compile.ic"
          depends="compile.frontend">
    <javac srcdir="src"
           includes="exm/stc/ic/*.java,exm/stc/ic/**/*.java"
           listfiles="${lf}"
           debug="true"
           debuglevel="source,lines,vars"
           includeantruntime="false"
           classpath="${classpath}:${json.jar}">
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-cast"/>
    </javac>
  </target>


  <!-- Compile the UI -->
  <target name="compile.ui"
          depends="compile.antlr">
    <javac srcdir="src"
           includes="exm/stc/ui/*.java"
           listfiles="${lf}"
           debug="true"
           debuglevel="source,lines,vars"
           includeantruntime="false"
           classpath="${classpath}:${json.jar}">
      <compilerarg value="-Xlint:-cast"/>
    </javac>
  </target>

  <!-- Compile the common utilities-->
  <target name="compile.common">
    <javac srcdir="src"
           includes="exm/stc/common/*.java,exm/stc/common/**/*.java"
           listfiles="${lf}"
           debug="true"
           debuglevel="source,lines,vars"
           includeantruntime="false"
           classpath="${classpath}:${json.jar}">
    </javac>
    <javac srcdir="src"
           includes="exm/stc/*.java"
           listfiles="${lf}"
           debug="true"
           debuglevel="source,lines,vars"
           includeantruntime="false"
           classpath="${classpath}:${json.jar}">
    </javac>
  </target>

  <!-- Compile the code generator -->
  <target name="compile.gen"> 
    <javac srcdir="src"
           includes="exm/stc/tclbackend/*.java,exm/stc/tclbackend/**/*.java"
           listfiles="${lf}"
           debug="true"
           debuglevel="source,lines,vars"
           includeantruntime="false"
           classpath=".:${antlr.jar}:${log4j.jar}:${json.jar}">
    </javac>
  </target>

  <target name="clean">
    <delete file="${parser.jar}"/>
    <!-- Delete all ANTLR-generated stuff -->
    <delete dir="${antlr.out}"/>
    <delete>
      <fileset dir="src" includes="**/*.class"/>
    </delete>
  </target>

</project>
